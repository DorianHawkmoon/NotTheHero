using System;using UnityEngine;using System.Collections.Generic;public class PathRequestManager : MonoBehaviour {    Queue<PathRequest> pathRequestQueue = new Queue<PathRequest>();    PathRequest currentPathRequest;    static PathRequestManager instance;    PathFinding pathFinding;    bool isProcessingPath;    public void Awake() {        instance = this;        pathFinding = GetComponent<PathFinding>();    }    public static void RequestPath(Vector3 pathStart, Vector3 pathEnd, Action<Vector3[], bool> callback) {        PathRequest newRequest = new PathRequest(pathStart, pathEnd, callback);        instance.pathRequestQueue.Enqueue(newRequest);        instance.TryProcessNext();    }    private void TryProcessNext() {        if(!isProcessingPath && pathRequestQueue.Count > 0) {            currentPathRequest = pathRequestQueue.Dequeue();            isProcessingPath = true;            pathFinding.StartFindPath(currentPathRequest.pathStart, currentPathRequest.pathEnd);        }    }    public void FinishedProcessingPath(Vector3[] path, bool success) {        currentPathRequest.callback(path, success);        isProcessingPath = false;        TryProcessNext();    }    struct PathRequest {        public Vector3 pathStart;        public Vector3 pathEnd;        public Action<Vector3[], bool> callback;        public PathRequest(Vector3 start, Vector3 end, Action<Vector3[], bool> callback) {            pathStart = start;            pathEnd = end;            this.callback = callback;        }    }}